(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{134:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/endian-686f08c26ab0cd783b611ac6c73cfe1b.png"},135:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/files/ModifiedEndianIO-ce8cec1f148839d10094d3f483b23124.kts"},67:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return o}));var n=a(2),b=a(6),r=(a(0),a(96)),l={},c={unversionedId:"protocol/data-types/index",id:"protocol/data-types/index",isDocsHomePage:!1,title:"index",description:"Data Types",source:"@site/docs/protocol/data-types/index.md",slug:"/protocol/data-types/index",permalink:"/docs/protocol/data-types/index",editUrl:"https://github.com/RuneDocs/Documentation/edit/master/docs/protocol/data-types/index.md",version:"current"},i=[{value:"Standard Java Data Types",id:"standard-java-data-types",children:[{value:"Signed and unsigned",id:"signed-and-unsigned",children:[]},{value:"Bit Access",id:"bit-access",children:[]}]},{value:"Obfuscation methods",id:"obfuscation-methods",children:[{value:"Endianness",id:"endianness",children:[]},{value:"Modifications",id:"modifications",children:[]},{value:"Implementation",id:"implementation",children:[]}]},{value:"Bespoke types",id:"bespoke-types",children:[{value:"Medium/Tribyte",id:"mediumtribyte",children:[]}]},{value:"Smart",id:"smart",children:[]}],d={rightToc:i};function o(e){var t=e.components,l=Object(b.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},d,l,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"data-types"},"Data Types"),Object(r.b)("p",null,"RuneScape uses a number of uncommon and bespoke data formats to obsfuscate communication and reduce cache file size."),Object(r.b)("p",null,"Each client revision randomises the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#endianness"}),"endianness")," and ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#modifications"}),"modifications")," used for decoding client packets. The OSRS protocol scrambling follows a decipherable order (citation needed)."),Object(r.b)("h2",{id:"standard-java-data-types"},"Standard Java Data Types"),Object(r.b)("p",null,"RuneScape client uses ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"}),"Java's primitive data types")," to store and transmit information, understanding these limitations and sizes are important regardless of client revision."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Size"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Minimum Value"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Maximum Value"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"byte"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1 byte"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-128"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"127")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"short"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2 bytes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-32,768"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"32,767")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4 bytes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-2,147,483,648"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2,147,483,647")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"long"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"8 bytes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-9,223,372,036,854,775,808"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"9,223,372,036,854,775,807")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4 bytes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"double"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"8 bytes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"boolean"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1 bit"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"char"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2 bytes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"65535")))),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"2,147,483,647 is the maximum stack a player can have of one item because item amounts are stored as integers.")),Object(r.b)("h3",{id:"signed-and-unsigned"},"Signed and unsigned"),Object(r.b)("p",null,"Data types typically are Signed, easily thought of as a single bit assigned as a binary flag denoting a positive or negative number. However when only positive values are necessary the flag can be unsigned allowing a larger number to be stored in the same amount of space."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Size"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Minimum Unsigned Value"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Maximum Unsigned Value"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"byte"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1 byte"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"255")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"short"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2 bytes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"65,535")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4 bytes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"\u202d4,294,967,296\u202c")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"long"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"8 bytes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"\u202d18,446,744,073,709,551,616\u202c")))),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Methods utilising unsigned integers commonly use 'U' as a prefix e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"readUByte"))),Object(r.b)("h3",{id:"bit-access"},"Bit Access"),Object(r.b)("p",null,"The client also utilises reading and writing individual bits interchangeably with other data types."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"TODO code example needed for both read and write which cleanly breaks down how it works")),Object(r.b)("h2",{id:"obfuscation-methods"},"Obfuscation methods"),Object(r.b)("h3",{id:"endianness"},"Endianness"),Object(r.b)("p",null,"The read and write order of byte data is called Endianness\nRuneScape client occasionally uses a middle-endian (integer's only) the order of which is determined by an ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#modifications"}),"inverse modification"),"."),Object(r.b)("p",null,Object(r.b)("img",{alt:"Endian order",src:a(134).default})),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Big - Most significant bit first"),Object(r.b)("li",{parentName:"ul"},"Little - Least significant bit first"),Object(r.b)("li",{parentName:"ul"},"Middle - Most significant bit central")),Object(r.b)("h3",{id:"modifications"},"Modifications"),Object(r.b)("p",null,"Several further modifications can be made to bytes before and reversed afterwards as obfuscation"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Read"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Write"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"value - 128")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"value + 128"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"C"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"-value")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"-value"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"S"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"128 - value")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"128 - value"))))),Object(r.b)("h3",{id:"implementation"},"Implementation"),Object(r.b)("p",null,Object(r.b)("a",{target:"_blank",href:a(135).default},"Kotlin")," (bespoke type support needed)"),Object(r.b)("h2",{id:"bespoke-types"},"Bespoke types"),Object(r.b)("h3",{id:"mediumtribyte"},"Medium/Tribyte"),Object(r.b)("p",null,"A custom data type for storing 3 byte numbers between -8,388,608 and 8,388,607"),Object(r.b)("h2",{id:"smart"},"Smart"),Object(r.b)("p",null,'Functions that "smartly" choose the smallest data type necessary to store the value provided'),Object(r.b)("p",null,"e.g"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"if value < byte max\n  write byte\nelse\n  write short\n")))}o.isMDXComponent=!0},96:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),b=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,b=function(e,t){if(null==e)return{};var a,n,b={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(b[a]=e[a]);return b}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(b[a]=e[a])}return b}var d=b.a.createContext({}),o=function(e){var t=b.a.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=o(e.components);return b.a.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return b.a.createElement(b.a.Fragment,{},t)}},O=b.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=o(a),O=n,u=p["".concat(l,".").concat(O)]||p[O]||s[O]||r;return a?b.a.createElement(u,c(c({ref:t},d),{},{components:a})):b.a.createElement(u,c({ref:t},d))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=O;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var d=2;d<r;d++)l[d]=a[d];return b.a.createElement.apply(null,l)}return b.a.createElement.apply(null,a)}O.displayName="MDXCreateElement"}}]);